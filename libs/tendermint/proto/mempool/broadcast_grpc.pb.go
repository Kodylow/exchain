// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: libs/tendermint/proto/mempool/broadcast.proto

package mempool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MempoolTxReceiverClient is the client API for MempoolTxReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MempoolTxReceiverClient interface {
	// Sends a greeting
	Receive(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckTxs(ctx context.Context, opts ...grpc.CallOption) (MempoolTxReceiver_CheckTxsClient, error)
}

type mempoolTxReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewMempoolTxReceiverClient(cc grpc.ClientConnInterface) MempoolTxReceiverClient {
	return &mempoolTxReceiverClient{cc}
}

func (c *mempoolTxReceiverClient) Receive(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mempool.MempoolTxReceiver/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolTxReceiverClient) CheckTxs(ctx context.Context, opts ...grpc.CallOption) (MempoolTxReceiver_CheckTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MempoolTxReceiver_ServiceDesc.Streams[0], "/mempool.MempoolTxReceiver/CheckTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &mempoolTxReceiverCheckTxsClient{stream}
	return x, nil
}

type MempoolTxReceiver_CheckTxsClient interface {
	Send(*TxPeersRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type mempoolTxReceiverCheckTxsClient struct {
	grpc.ClientStream
}

func (x *mempoolTxReceiverCheckTxsClient) Send(m *TxPeersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mempoolTxReceiverCheckTxsClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MempoolTxReceiverServer is the server API for MempoolTxReceiver service.
// All implementations must embed UnimplementedMempoolTxReceiverServer
// for forward compatibility
type MempoolTxReceiverServer interface {
	// Sends a greeting
	Receive(context.Context, *TxRequest) (*emptypb.Empty, error)
	CheckTxs(MempoolTxReceiver_CheckTxsServer) error
	mustEmbedUnimplementedMempoolTxReceiverServer()
}

// UnimplementedMempoolTxReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedMempoolTxReceiverServer struct {
}

func (UnimplementedMempoolTxReceiverServer) Receive(context.Context, *TxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedMempoolTxReceiverServer) CheckTxs(MempoolTxReceiver_CheckTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckTxs not implemented")
}
func (UnimplementedMempoolTxReceiverServer) mustEmbedUnimplementedMempoolTxReceiverServer() {}

// UnsafeMempoolTxReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MempoolTxReceiverServer will
// result in compilation errors.
type UnsafeMempoolTxReceiverServer interface {
	mustEmbedUnimplementedMempoolTxReceiverServer()
}

func RegisterMempoolTxReceiverServer(s grpc.ServiceRegistrar, srv MempoolTxReceiverServer) {
	s.RegisterService(&MempoolTxReceiver_ServiceDesc, srv)
}

func _MempoolTxReceiver_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolTxReceiverServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mempool.MempoolTxReceiver/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolTxReceiverServer).Receive(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MempoolTxReceiver_CheckTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MempoolTxReceiverServer).CheckTxs(&mempoolTxReceiverCheckTxsServer{stream})
}

type MempoolTxReceiver_CheckTxsServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*TxPeersRequest, error)
	grpc.ServerStream
}

type mempoolTxReceiverCheckTxsServer struct {
	grpc.ServerStream
}

func (x *mempoolTxReceiverCheckTxsServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mempoolTxReceiverCheckTxsServer) Recv() (*TxPeersRequest, error) {
	m := new(TxPeersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MempoolTxReceiver_ServiceDesc is the grpc.ServiceDesc for MempoolTxReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MempoolTxReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mempool.MempoolTxReceiver",
	HandlerType: (*MempoolTxReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _MempoolTxReceiver_Receive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckTxs",
			Handler:       _MempoolTxReceiver_CheckTxs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "libs/tendermint/proto/mempool/broadcast.proto",
}
