// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: libs/tendermint/mempool/dydx/server.proto

package dydx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderBookUpdaterClient is the client API for OrderBookUpdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderBookUpdaterClient interface {
	// rpc WatchOrderBook (Empty) returns(stream OrderBook) {}
	WatchOrderBookLevel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (OrderBookUpdater_WatchOrderBookLevelClient, error)
}

type orderBookUpdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderBookUpdaterClient(cc grpc.ClientConnInterface) OrderBookUpdaterClient {
	return &orderBookUpdaterClient{cc}
}

func (c *orderBookUpdaterClient) WatchOrderBookLevel(ctx context.Context, in *Empty, opts ...grpc.CallOption) (OrderBookUpdater_WatchOrderBookLevelClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderBookUpdater_ServiceDesc.Streams[0], "/dydx.OrderBookUpdater/WatchOrderBookLevel", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderBookUpdaterWatchOrderBookLevelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderBookUpdater_WatchOrderBookLevelClient interface {
	Recv() (*OrderBookLevel, error)
	grpc.ClientStream
}

type orderBookUpdaterWatchOrderBookLevelClient struct {
	grpc.ClientStream
}

func (x *orderBookUpdaterWatchOrderBookLevelClient) Recv() (*OrderBookLevel, error) {
	m := new(OrderBookLevel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderBookUpdaterServer is the server API for OrderBookUpdater service.
// All implementations must embed UnimplementedOrderBookUpdaterServer
// for forward compatibility
type OrderBookUpdaterServer interface {
	// rpc WatchOrderBook (Empty) returns(stream OrderBook) {}
	WatchOrderBookLevel(*Empty, OrderBookUpdater_WatchOrderBookLevelServer) error
	mustEmbedUnimplementedOrderBookUpdaterServer()
}

// UnimplementedOrderBookUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedOrderBookUpdaterServer struct {
}

func (UnimplementedOrderBookUpdaterServer) WatchOrderBookLevel(*Empty, OrderBookUpdater_WatchOrderBookLevelServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchOrderBookLevel not implemented")
}
func (UnimplementedOrderBookUpdaterServer) mustEmbedUnimplementedOrderBookUpdaterServer() {}

// UnsafeOrderBookUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderBookUpdaterServer will
// result in compilation errors.
type UnsafeOrderBookUpdaterServer interface {
	mustEmbedUnimplementedOrderBookUpdaterServer()
}

func RegisterOrderBookUpdaterServer(s grpc.ServiceRegistrar, srv OrderBookUpdaterServer) {
	s.RegisterService(&OrderBookUpdater_ServiceDesc, srv)
}

func _OrderBookUpdater_WatchOrderBookLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderBookUpdaterServer).WatchOrderBookLevel(m, &orderBookUpdaterWatchOrderBookLevelServer{stream})
}

type OrderBookUpdater_WatchOrderBookLevelServer interface {
	Send(*OrderBookLevel) error
	grpc.ServerStream
}

type orderBookUpdaterWatchOrderBookLevelServer struct {
	grpc.ServerStream
}

func (x *orderBookUpdaterWatchOrderBookLevelServer) Send(m *OrderBookLevel) error {
	return x.ServerStream.SendMsg(m)
}

// OrderBookUpdater_ServiceDesc is the grpc.ServiceDesc for OrderBookUpdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderBookUpdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dydx.OrderBookUpdater",
	HandlerType: (*OrderBookUpdaterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchOrderBookLevel",
			Handler:       _OrderBookUpdater_WatchOrderBookLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "libs/tendermint/mempool/dydx/server.proto",
}
