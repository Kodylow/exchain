// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/okex/exchain/x/evm/statistics/orm/model"
)

func newReward(db *gorm.DB, opts ...gen.DOOption) reward {
	_reward := reward{}

	_reward.rewardDo.UseDB(db, opts...)
	_reward.rewardDo.UseModel(&model.Reward{})

	tableName := _reward.rewardDo.TableName()
	_reward.ALL = field.NewAsterisk(tableName)
	_reward.ID = field.NewInt64(tableName, "id")
	_reward.Height = field.NewInt64(tableName, "height")
	_reward.BlockTime = field.NewTime(tableName, "block_time")
	_reward.Txhash = field.NewString(tableName, "txhash")
	_reward.Txsender = field.NewString(tableName, "txsender")
	_reward.Useraddr = field.NewString(tableName, "useraddr")
	_reward.Amount = field.NewString(tableName, "amount")

	_reward.fillFieldMap()

	return _reward
}

type reward struct {
	rewardDo rewardDo

	ALL       field.Asterisk
	ID        field.Int64
	Height    field.Int64
	BlockTime field.Time
	Txhash    field.String
	Txsender  field.String
	Useraddr  field.String
	Amount    field.String

	fieldMap map[string]field.Expr
}

func (r reward) Table(newTableName string) *reward {
	r.rewardDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reward) As(alias string) *reward {
	r.rewardDo.DO = *(r.rewardDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reward) updateTableName(table string) *reward {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Height = field.NewInt64(table, "height")
	r.BlockTime = field.NewTime(table, "block_time")
	r.Txhash = field.NewString(table, "txhash")
	r.Txsender = field.NewString(table, "txsender")
	r.Useraddr = field.NewString(table, "useraddr")
	r.Amount = field.NewString(table, "amount")

	r.fillFieldMap()

	return r
}

func (r *reward) WithContext(ctx context.Context) IRewardDo { return r.rewardDo.WithContext(ctx) }

func (r reward) TableName() string { return r.rewardDo.TableName() }

func (r reward) Alias() string { return r.rewardDo.Alias() }

func (r *reward) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reward) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["height"] = r.Height
	r.fieldMap["block_time"] = r.BlockTime
	r.fieldMap["txhash"] = r.Txhash
	r.fieldMap["txsender"] = r.Txsender
	r.fieldMap["useraddr"] = r.Useraddr
	r.fieldMap["amount"] = r.Amount
}

func (r reward) clone(db *gorm.DB) reward {
	r.rewardDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reward) replaceDB(db *gorm.DB) reward {
	r.rewardDo.ReplaceDB(db)
	return r
}

type rewardDo struct{ gen.DO }

type IRewardDo interface {
	gen.SubQuery
	Debug() IRewardDo
	WithContext(ctx context.Context) IRewardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRewardDo
	WriteDB() IRewardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRewardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRewardDo
	Not(conds ...gen.Condition) IRewardDo
	Or(conds ...gen.Condition) IRewardDo
	Select(conds ...field.Expr) IRewardDo
	Where(conds ...gen.Condition) IRewardDo
	Order(conds ...field.Expr) IRewardDo
	Distinct(cols ...field.Expr) IRewardDo
	Omit(cols ...field.Expr) IRewardDo
	Join(table schema.Tabler, on ...field.Expr) IRewardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRewardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRewardDo
	Group(cols ...field.Expr) IRewardDo
	Having(conds ...gen.Condition) IRewardDo
	Limit(limit int) IRewardDo
	Offset(offset int) IRewardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardDo
	Unscoped() IRewardDo
	Create(values ...*model.Reward) error
	CreateInBatches(values []*model.Reward, batchSize int) error
	Save(values ...*model.Reward) error
	First() (*model.Reward, error)
	Take() (*model.Reward, error)
	Last() (*model.Reward, error)
	Find() ([]*model.Reward, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Reward, err error)
	FindInBatches(result *[]*model.Reward, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Reward) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRewardDo
	Assign(attrs ...field.AssignExpr) IRewardDo
	Joins(fields ...field.RelationField) IRewardDo
	Preload(fields ...field.RelationField) IRewardDo
	FirstOrInit() (*model.Reward, error)
	FirstOrCreate() (*model.Reward, error)
	FindByPage(offset int, limit int) (result []*model.Reward, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRewardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rewardDo) Debug() IRewardDo {
	return r.withDO(r.DO.Debug())
}

func (r rewardDo) WithContext(ctx context.Context) IRewardDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rewardDo) ReadDB() IRewardDo {
	return r.Clauses(dbresolver.Read)
}

func (r rewardDo) WriteDB() IRewardDo {
	return r.Clauses(dbresolver.Write)
}

func (r rewardDo) Session(config *gorm.Session) IRewardDo {
	return r.withDO(r.DO.Session(config))
}

func (r rewardDo) Clauses(conds ...clause.Expression) IRewardDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rewardDo) Returning(value interface{}, columns ...string) IRewardDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rewardDo) Not(conds ...gen.Condition) IRewardDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rewardDo) Or(conds ...gen.Condition) IRewardDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rewardDo) Select(conds ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rewardDo) Where(conds ...gen.Condition) IRewardDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rewardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRewardDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rewardDo) Order(conds ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rewardDo) Distinct(cols ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rewardDo) Omit(cols ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rewardDo) Join(table schema.Tabler, on ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rewardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRewardDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rewardDo) RightJoin(table schema.Tabler, on ...field.Expr) IRewardDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rewardDo) Group(cols ...field.Expr) IRewardDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rewardDo) Having(conds ...gen.Condition) IRewardDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rewardDo) Limit(limit int) IRewardDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rewardDo) Offset(offset int) IRewardDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rewardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRewardDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rewardDo) Unscoped() IRewardDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rewardDo) Create(values ...*model.Reward) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rewardDo) CreateInBatches(values []*model.Reward, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rewardDo) Save(values ...*model.Reward) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rewardDo) First() (*model.Reward, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reward), nil
	}
}

func (r rewardDo) Take() (*model.Reward, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reward), nil
	}
}

func (r rewardDo) Last() (*model.Reward, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reward), nil
	}
}

func (r rewardDo) Find() ([]*model.Reward, error) {
	result, err := r.DO.Find()
	return result.([]*model.Reward), err
}

func (r rewardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Reward, err error) {
	buf := make([]*model.Reward, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rewardDo) FindInBatches(result *[]*model.Reward, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rewardDo) Attrs(attrs ...field.AssignExpr) IRewardDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rewardDo) Assign(attrs ...field.AssignExpr) IRewardDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rewardDo) Joins(fields ...field.RelationField) IRewardDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rewardDo) Preload(fields ...field.RelationField) IRewardDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rewardDo) FirstOrInit() (*model.Reward, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reward), nil
	}
}

func (r rewardDo) FirstOrCreate() (*model.Reward, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Reward), nil
	}
}

func (r rewardDo) FindByPage(offset int, limit int) (result []*model.Reward, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rewardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rewardDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rewardDo) Delete(models ...*model.Reward) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rewardDo) withDO(do gen.Dao) *rewardDo {
	r.DO = *do.(*gen.DO)
	return r
}
