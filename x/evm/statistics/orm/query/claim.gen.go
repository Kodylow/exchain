// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/okex/exchain/x/evm/statistics/orm/model"
)

func newClaim(db *gorm.DB, opts ...gen.DOOption) claim {
	_claim := claim{}

	_claim.claimDo.UseDB(db, opts...)
	_claim.claimDo.UseModel(&model.Claim{})

	tableName := _claim.claimDo.TableName()
	_claim.ALL = field.NewAsterisk(tableName)
	_claim.ID = field.NewInt64(tableName, "id")
	_claim.Height = field.NewInt64(tableName, "height")
	_claim.BlockTime = field.NewTime(tableName, "block_time")
	_claim.Txhash = field.NewString(tableName, "txhash")
	_claim.Txsender = field.NewString(tableName, "txsender")
	_claim.Useraddr = field.NewString(tableName, "useraddr")
	_claim.Term = field.NewInt64(tableName, "term")
	_claim.Rank = field.NewInt64(tableName, "rank")
	_claim.Reward = field.NewInt64(tableName, "reward")
	_claim.RewardID = field.NewInt64(tableName, "reward_id")

	_claim.fillFieldMap()

	return _claim
}

type claim struct {
	claimDo claimDo

	ALL       field.Asterisk
	ID        field.Int64
	Height    field.Int64
	BlockTime field.Time
	Txhash    field.String
	Txsender  field.String
	Useraddr  field.String
	Term      field.Int64
	Rank      field.Int64
	Reward    field.Int64
	RewardID  field.Int64

	fieldMap map[string]field.Expr
}

func (c claim) Table(newTableName string) *claim {
	c.claimDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c claim) As(alias string) *claim {
	c.claimDo.DO = *(c.claimDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *claim) updateTableName(table string) *claim {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Height = field.NewInt64(table, "height")
	c.BlockTime = field.NewTime(table, "block_time")
	c.Txhash = field.NewString(table, "txhash")
	c.Txsender = field.NewString(table, "txsender")
	c.Useraddr = field.NewString(table, "useraddr")
	c.Term = field.NewInt64(table, "term")
	c.Rank = field.NewInt64(table, "rank")
	c.Reward = field.NewInt64(table, "reward")
	c.RewardID = field.NewInt64(table, "reward_id")

	c.fillFieldMap()

	return c
}

func (c *claim) WithContext(ctx context.Context) IClaimDo { return c.claimDo.WithContext(ctx) }

func (c claim) TableName() string { return c.claimDo.TableName() }

func (c claim) Alias() string { return c.claimDo.Alias() }

func (c *claim) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *claim) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["height"] = c.Height
	c.fieldMap["block_time"] = c.BlockTime
	c.fieldMap["txhash"] = c.Txhash
	c.fieldMap["txsender"] = c.Txsender
	c.fieldMap["useraddr"] = c.Useraddr
	c.fieldMap["term"] = c.Term
	c.fieldMap["rank"] = c.Rank
	c.fieldMap["reward"] = c.Reward
	c.fieldMap["reward_id"] = c.RewardID
}

func (c claim) clone(db *gorm.DB) claim {
	c.claimDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c claim) replaceDB(db *gorm.DB) claim {
	c.claimDo.ReplaceDB(db)
	return c
}

type claimDo struct{ gen.DO }

type IClaimDo interface {
	gen.SubQuery
	Debug() IClaimDo
	WithContext(ctx context.Context) IClaimDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClaimDo
	WriteDB() IClaimDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClaimDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClaimDo
	Not(conds ...gen.Condition) IClaimDo
	Or(conds ...gen.Condition) IClaimDo
	Select(conds ...field.Expr) IClaimDo
	Where(conds ...gen.Condition) IClaimDo
	Order(conds ...field.Expr) IClaimDo
	Distinct(cols ...field.Expr) IClaimDo
	Omit(cols ...field.Expr) IClaimDo
	Join(table schema.Tabler, on ...field.Expr) IClaimDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClaimDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClaimDo
	Group(cols ...field.Expr) IClaimDo
	Having(conds ...gen.Condition) IClaimDo
	Limit(limit int) IClaimDo
	Offset(offset int) IClaimDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClaimDo
	Unscoped() IClaimDo
	Create(values ...*model.Claim) error
	CreateInBatches(values []*model.Claim, batchSize int) error
	Save(values ...*model.Claim) error
	First() (*model.Claim, error)
	Take() (*model.Claim, error)
	Last() (*model.Claim, error)
	Find() ([]*model.Claim, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Claim, err error)
	FindInBatches(result *[]*model.Claim, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Claim) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClaimDo
	Assign(attrs ...field.AssignExpr) IClaimDo
	Joins(fields ...field.RelationField) IClaimDo
	Preload(fields ...field.RelationField) IClaimDo
	FirstOrInit() (*model.Claim, error)
	FirstOrCreate() (*model.Claim, error)
	FindByPage(offset int, limit int) (result []*model.Claim, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClaimDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c claimDo) Debug() IClaimDo {
	return c.withDO(c.DO.Debug())
}

func (c claimDo) WithContext(ctx context.Context) IClaimDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c claimDo) ReadDB() IClaimDo {
	return c.Clauses(dbresolver.Read)
}

func (c claimDo) WriteDB() IClaimDo {
	return c.Clauses(dbresolver.Write)
}

func (c claimDo) Session(config *gorm.Session) IClaimDo {
	return c.withDO(c.DO.Session(config))
}

func (c claimDo) Clauses(conds ...clause.Expression) IClaimDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c claimDo) Returning(value interface{}, columns ...string) IClaimDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c claimDo) Not(conds ...gen.Condition) IClaimDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c claimDo) Or(conds ...gen.Condition) IClaimDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c claimDo) Select(conds ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c claimDo) Where(conds ...gen.Condition) IClaimDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c claimDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IClaimDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c claimDo) Order(conds ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c claimDo) Distinct(cols ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c claimDo) Omit(cols ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c claimDo) Join(table schema.Tabler, on ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c claimDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClaimDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c claimDo) RightJoin(table schema.Tabler, on ...field.Expr) IClaimDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c claimDo) Group(cols ...field.Expr) IClaimDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c claimDo) Having(conds ...gen.Condition) IClaimDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c claimDo) Limit(limit int) IClaimDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c claimDo) Offset(offset int) IClaimDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c claimDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClaimDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c claimDo) Unscoped() IClaimDo {
	return c.withDO(c.DO.Unscoped())
}

func (c claimDo) Create(values ...*model.Claim) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c claimDo) CreateInBatches(values []*model.Claim, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c claimDo) Save(values ...*model.Claim) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c claimDo) First() (*model.Claim, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Claim), nil
	}
}

func (c claimDo) Take() (*model.Claim, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Claim), nil
	}
}

func (c claimDo) Last() (*model.Claim, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Claim), nil
	}
}

func (c claimDo) Find() ([]*model.Claim, error) {
	result, err := c.DO.Find()
	return result.([]*model.Claim), err
}

func (c claimDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Claim, err error) {
	buf := make([]*model.Claim, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c claimDo) FindInBatches(result *[]*model.Claim, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c claimDo) Attrs(attrs ...field.AssignExpr) IClaimDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c claimDo) Assign(attrs ...field.AssignExpr) IClaimDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c claimDo) Joins(fields ...field.RelationField) IClaimDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c claimDo) Preload(fields ...field.RelationField) IClaimDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c claimDo) FirstOrInit() (*model.Claim, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Claim), nil
	}
}

func (c claimDo) FirstOrCreate() (*model.Claim, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Claim), nil
	}
}

func (c claimDo) FindByPage(offset int, limit int) (result []*model.Claim, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c claimDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c claimDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c claimDo) Delete(models ...*model.Claim) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *claimDo) withDO(do gen.Dao) *claimDo {
	c.DO = *do.(*gen.DO)
	return c
}
