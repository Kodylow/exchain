#!/bin/bash
# two-chainz creates two gaiad chains and configures the relayer to 

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
GAIA_DATA="$(pwd)/data"
RELAYER_DIR="$(dirname $SCRIPTDIR)"
RELAYER_CONF="$HOME/.relayer"


killbyname() {
  NAME=$1
  ps -ef|grep "$NAME"|grep -v grep |awk '{print "kill -9 "$2", "$8}'
  ps -ef|grep "$NAME"|grep -v grep |awk '{print "kill -9 "$2}' | sh
  echo "All <$NAME> killed!"
}


# Ensure gaiad is installed
if ! [ -x "$(which gaiad)" ]; then
  echo "Error: gaiad is not installed. Try running 'make build-gaia'" >&2
  exit 1
fi

# Display software version for testers
echo "GAIA VERSION INFO:"
gaiad version --long

# Ensure jq is installed
if [[ ! -x "$(which jq)" ]]; then
  echo "jq (a tool for parsing json in the command line) is required..."
  echo "https://stedolan.github.io/jq/download/"
  exit 1
fi

# Ensure user understands what will be deleted
if [[ -d $GAIA_DATA ]] && [[ ! "$1" == "skip" ]]; then
  read -p "$(basename $0) will delete \$(pwd)/data and \$HOME/.relayer folders. Do you wish to continue? (y/n): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
  fi
fi

# Delete data from old runs
rm -rf $GAIA_DATA &> /dev/null
rm -rf $RELAYER_CONF &> /dev/null

# Stop existing gaiad processes
killall gaiad &> /dev/null
killall akash &> /dev/null

set -e


killbyname exchaind
killbyname exchaincli

chainid0="exchain-100"
chainid1="exchain-101"

echo "Generating gaia configurations..."
mkdir -p $GAIA_DATA && cd $GAIA_DATA && cd ../
./start.sh $chainid0 ./data 26657 26656 6060 9090 8084
./start.sh $chainid1 ./data 26557 26556 6061 9091 8085
#
#[ -f $GAIA_DATA/$chainid0.log ] && echo "$chainid0 initialized. Watch file $GAIA_DATA/$chainid0.log to see its execution."
#[ -f $GAIA_DATA/$chainid1.log ] && echo "$chainid1 initialized. Watch file $GAIA_DATA/$chainid1.log to see its execution."
#
#cd $RELAYER_DIR
#
#echo "Building Relayer..."
#make install
#
#echo "Generating rly configurations..."
#rly config init
#rly config add-chains configs/demo/chains
#
#SEED0=$(jq -r '.mnemonic' $GAIA_DATA/ibc-0/key_seed.json)
#SEED1=$(jq -r '.mnemonic' $GAIA_DATA/ibc-1/key_seed.json)
#echo "Key $(rly keys restore ibc-0 testkey "$SEED0") imported from ibc-0 to relayer..."
#echo "Key $(rly keys restore ibc-1 testkey "$SEED1") imported from ibc-1 to relayer..."
#
#rly config add-paths configs/demo/paths

#
pwd=${PWD}
echo  "relayer"
relayer_path=${GOPATH}/src/github.com/cosmos/relayer
if [ ! -d ${relayer_path} ];then
  mkdir -p ${GOPATH}/src/github.com/cosmos/
  cd ${GOPATH}/src/github.com/cosmos/
  git clone https://github.com/cosmos/relayer.git
fi

cd ${GOPATH}/src/github.com/cosmos/relayer
git checkout v1.0.0
if [ $? -ne 0 ]; then
    echo "checkout failed ,use stash or commit first"
    exit
fi

rm -rf vendor
rm -rf ~/.relayer
echo "Building Relayer..."
make install
cd ${pwd}
echo "Generating rly configurations..."
rly config init
rly config add-chains configs/demo/chains

#SEED0=$(jq -r '.name' $GAIA_DATA/exchain-100/key_seed.json)
#SEED1=$(jq -r '.name' $GAIA_DATA/exchain-101/key_seed.json)
#echo ${SEED0}
#echo ${SEED1}

#mem=""
#function  getMem() {
#    chainName=${1}
#    rm -f ./temp.json
#    rly keys add ${chainName} admin16 >  ./temp.json
#    mem=$(jq -r '.mnemonic' ./temp.json)
#}
#
##echo "Key $(rly keys restore exchain-100 testkey "$SEED0") imported from exchain-100 to relayer..."
##echo "Key $(rly keys restore exchain-101 testkey "$SEED1") imported from exchain-101 to relayer..."
#getMem exchain-100
#echo "Key $(rly keys restore exchain-100 testkey "$mem") imported from exchain-100 to relayer..."
#getMem exchain-101
#echo "Key $(rly keys restore exchain-101 testkey "$mem") imported from exchain-101 to relayer..."


echo "Key $(rly keys add exchain-100 admin16 ) imported from exchain-100 to relayer..."
echo "Key $(rly keys add exchain-101 admin16 ) imported from exchain-101 to relayer..."

#
echo "current chains:"
rly chains list
#
#
rly config add-paths configs/demo/paths
echo "current pathes"
rly paths list